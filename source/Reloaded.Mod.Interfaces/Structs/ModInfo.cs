namespace Reloaded.Mod.Interfaces.Structs;

/// <summary>
/// Contains the information about a loaded-in mod.
/// </summary>
public class ModInfo
{
    /// <summary>
    /// Gets the current ID of the mod.
    /// </summary>
    public string ModId => Config.ModId;

    /// <summary>
    /// The current state of the mod.
    /// </summary>
    public ModState State { get; set; }

    /// <summary>
    /// The individual full configuration of this mod.
    /// </summary>
    public IModConfig Config { get; set; }

    /// <summary>
    /// True if this mod can be suspended.
    /// </summary>
    public bool CanSuspend { get; set; }

    /// <summary>
    /// True if this mod can be unloaded.
    /// </summary>
    public bool CanUnload { get; set; }

    /// <summary>
    /// Contains information about a loaded in mod.
    /// </summary>
    /// <param name="state">The current state of the mod.</param>
    /// <param name="modConfig">The current mod configuration.</param>
    /// <param name="canSuspend">Whether the mod can be suspended.</param>
    /// <param name="canUnload">Whether the mod can be reloaded.</param>
    public ModInfo(ModState state, IModConfig modConfig, bool canSuspend, bool canUnload)
    {
        State = state;
        Config = modConfig;
        CanSuspend = canSuspend;
        CanUnload = canUnload;
    }

    /// <summary>
    /// For serializers.
    /// </summary>
    public ModInfo() { }

    /// <summary>
    /// Returns true if the client can send a suspend command for this mod.
    /// </summary>
    public bool CanSendSuspend => State == ModState.Running && CanSuspend;

    /// <summary>
    /// Returns true if the client can send a resume command for this mod.
    /// </summary>
    public bool CanSendResume => State == ModState.Suspended && CanSuspend;

    /* Autogenerated by R# */
    protected bool Equals(ModInfo other)
    {
        return State == other.State &&
               Config.Equals(other.Config) &&
               CanSuspend == other.CanSuspend &&
               CanUnload == other.CanUnload;
    }

    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj))
            return false;

        if (ReferenceEquals(this, obj))
            return true;

        if (obj.GetType() != GetType())
            return false;

        return Equals((ModInfo)obj);
    }

    public override int GetHashCode()
    {
        unchecked
        {
            var hashCode = (int)State;
            hashCode = hashCode * 397 ^ Config.GetHashCode();
            hashCode = hashCode * 397 ^ CanSuspend.GetHashCode();
            hashCode = hashCode * 397 ^ CanUnload.GetHashCode();
            return hashCode;
        }
    }
}