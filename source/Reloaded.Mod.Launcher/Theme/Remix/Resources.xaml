<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:Reloaded.Mod.Launcher.Controls;assembly=Reloaded-II"
    xmlns:converter="clr-namespace:Reloaded.WPF.Theme.Default.Converter;assembly=Reloaded.WPF.Theme.Default"
    xmlns:fa="http://schemas.awesome.incremented/wpf/xaml/fontawesome.sharp"
    xmlns:hc="https://handyorg.github.io/handycontrol"
    xmlns:re="clr-namespace:Reloaded.WPF.Theme.Default;assembly=Reloaded.WPF.Theme.Default"
    xmlns:recontrol="clr-namespace:Reloaded.WPF.Controls;assembly=Reloaded.WPF"
    xmlns:rxui="http://reactiveui.net"
    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <recontrol:SharedResourceDictionary Source="pack://siteoforigin:,,,/Theme/Remix/Colors.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </ResourceDictionary.MergedDictionaries>

    <Thickness x:Key="PageMargin">20,12</Thickness>

    <!--  Styless Button  -->
    <Style x:Key="StylessButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ContentPresenter />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FormTextBlockHeader" TargetType="{x:Type TextBlock}">
        <Setter Property="Margin" Value="0,0,0,4" />
        <Setter Property="FontFamily" Value="{DynamicResource FontBold}" />
        <Setter Property="FontSize" Value="14" />
    </Style>

    <!--  Glow  -->
    <Color x:Key="AccentColorHighlight">#FF9999</Color>
    <SolidColorBrush x:Key="AccentColorHighlightBrush" Color="{DynamicResource AccentColorHighlight}" />

    <Color x:Key="AccentColorGlow">#FF0000</Color>
    <SolidColorBrush x:Key="AccentColorGlowBrush" Color="{DynamicResource AccentColorHighlight}" />

    <!--  Fix Scrollbar  -->
    <sys:Double x:Key="ScrollbarWidth">16</sys:Double>
    <GridLength x:Key="ScrollbarBarMargin">0</GridLength>
    <sys:Double x:Key="ScrollbarRadius">0</sys:Double>

    <Style
        x:Key="DefaultButton"
        BasedOn="{StaticResource DefaultButton}"
        TargetType="{x:Type Button}">
        <Setter Property="MinHeight" Value="32" />
        <Setter Property="Padding" Value="8,0" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
    </Style>

    <Style BasedOn="{StaticResource DefaultButton}" TargetType="{x:Type Button}">
        <Setter Property="MinHeight" Value="32" />
        <Setter Property="Padding" Value="8,0" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
    </Style>

    <Style
        x:Key="DefaultCheckBox"
        BasedOn="{StaticResource DefaultCheckBox}"
        TargetType="{x:Type CheckBox}">
        <Setter Property="HorizontalAlignment" Value="Left" />
    </Style>

    <sys:Double x:Key="TooltipBackgroundOpacity">1</sys:Double>

    <!--  *********************************************************  -->
    <!--  Window Glow/Shadow  -->
    <Color x:Key="GlowColorInactive">#000</Color>
    <Color x:Key="GlowColorDefault">#000</Color>
    <Color x:Key="GlowColorEngaged">#000</Color>
    <sys:Double x:Key="GlowOpacity">1</sys:Double>
    <sys:Double x:Key="GlowDirection">315</sys:Double>
    <sys:Double x:Key="GlowDepth">0</sys:Double>

    <!--  *********************************************************  -->
    <!--  Control Colors  -->

    <!--  Fix TextBox border disappearing on mouse hover.  -->
    <SolidColorBrush x:Key="SecondaryBorderBrush" Color="{DynamicResource BorderColorLight}" />

    <!--  Reloaded doesn't have the colors for "regions"; always use background color.  -->
    <SolidColorBrush x:Key="RegionBrush" Color="{DynamicResource BackgroundColor}" />

    <!--  *********************************************************  -->
    <!--  ListView  -->

    <!--
        For use in fixing binding errors from the use of WrapPanel as ItemsPanelTemplate, such as ModsList.
        Solution: https://stackoverflow.com/a/23455790
    -->
    <Style x:Key="DefaultListViewItemStyle" TargetType="{x:Type ListViewItem}">
        <Setter Property="Padding" Value="{DynamicResource ListViewItemPadding}" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource ReloadedFocusVisual}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Grid>
                        <!--  Margin of 1 prevents listbox item from overlapping with border.  -->
                        <Rectangle Margin="1" Fill="{TemplateBinding Background}" />
                        <ContentPresenter
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource BackgroundFadeBackgroundToBorderDark}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource BackgroundFadeBorderDarkToBackground}" />
                </Trigger.ExitActions>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Window Control Button  -->
    <Style
        x:Key="WindowControlButton"
        BasedOn="{StaticResource BaseStyle}"
        TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="Width" Value="{Binding Path=ActualHeight, RelativeSource={RelativeSource Self}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <TextBlock
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Text="{TemplateBinding Content}" />
                    </Border>

                    <!--  Mouseover Color Switch  -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource ControlFillToHighlight}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource ControlHighlightToFill}" />
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ReloadedReactiveWindow" TargetType="Window">
        <!--  Redefine Window Template  -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Window">

                    <AdornerDecorator>
                        <!--  Gives us invisible padding space to allow for rendering of drop shadow.  -->
                        <Border Padding="{Binding Path=DropShadowBorderSize}" Background="Transparent">
                            <Grid>
                                <!--
                                    The glowing border of the Window.
                                    The important thing is that this must be separate and not nest the content below!
                                    The DropShadowEffect uses all descendant objects to calculate the shape of the shadow.
                                    which means that every time any children are updated the shadow is recalculated.
                                -->
                                <Border
                                    x:Name="DropShadowBorder"
                                    Background="{Binding Path=Background, RelativeSource={RelativeSource AncestorType={x:Type Window}}, FallbackValue=#181818}"
                                    CornerRadius="{DynamicResource CornerRadius}">
                                    <Border.Effect>
                                        <DropShadowEffect
                                            BlurRadius="{Binding Path=DropShadowSize}"
                                            Direction="{DynamicResource GlowDirection}"
                                            Opacity="{DynamicResource GlowOpacity}"
                                            RenderingBias="{DynamicResource GlowRenderBias}"
                                            ShadowDepth="{DynamicResource GlowDepth}"
                                            Color="{Binding Path=GlowColor, Converter={x:Static converter:ColorToShadowColorConverter.Instance}}" />
                                    </Border.Effect>
                                </Border>

                                <!--  This is our window background and the owner of what we see onscreen.  -->
                                <Border
                                    x:Name="ContentBorder"
                                    Background="Transparent"
                                    CornerRadius="{DynamicResource CornerRadius}">
                                    <Border.Clip>
                                        <MultiBinding Converter="{x:Static converter:BorderClipConverter.Instance}">
                                            <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}" />
                                            <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}" />
                                            <Binding Path="CornerRadius" RelativeSource="{RelativeSource Self}" />
                                        </MultiBinding>
                                    </Border.Clip>

                                    <!--  Main Window Content  -->
                                    <Grid>

                                        <!--  TitleBar and rest of page for content.  -->
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="{DynamicResource TitleBarHeight}" />
                                            <RowDefinition Height="*" />
                                        </Grid.RowDefinitions>

                                        <!--  Title Bar  -->
                                        <Grid Grid.Row="0">

                                            <!--  Title & Buttons  -->
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*" />
                                                <ColumnDefinition Width="Auto" />
                                            </Grid.ColumnDefinitions>

                                            <Viewbox
                                                Grid.Column="0"
                                                Grid.ColumnSpan="2"
                                                Style="{DynamicResource HeaderAlignment}">
                                                <TextBlock
                                                    FontFamily="{DynamicResource FontBold}"
                                                    FontSize="8"
                                                    Style="{DynamicResource HeaderText}"
                                                    Text="{Binding Title, RelativeSource={RelativeSource AncestorType=Window}, FallbackValue=''}" />
                                            </Viewbox>

                                            <StackPanel Grid.Column="1" Orientation="Horizontal">
                                                <Button
                                                    Command="{Binding Source={x:Static controls:WindowCommands.MinWindowCommand}}"
                                                    CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=Window}}"
                                                    Content="—"
                                                    Style="{DynamicResource WindowControlButton}" />
                                                <Button
                                                    Command="{Binding Source={x:Static controls:WindowCommands.MaxWindowCommand}}"
                                                    CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=Window}}"
                                                    Content="O"
                                                    Style="{DynamicResource WindowControlButton}" />
                                                <Button
                                                    Command="{Binding Source={x:Static controls:WindowCommands.CloseWindowCommand}}"
                                                    CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=Window}}"
                                                    Content="X"
                                                    Style="{DynamicResource WindowControlButton}" />
                                            </StackPanel>
                                        </Grid>

                                        <!--  Window Content Goes in Here  -->
                                        <Grid Grid.Row="1">
                                            <ContentPresenter Content="{TemplateBinding Content}" />
                                        </Grid>
                                    </Grid>
                                </Border>
                            </Grid>
                        </Border>
                    </AdornerDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--  WindowChrome for Window Dragging, Round Corners  -->
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome
                    CaptionHeight="{Binding Path=WindowChromeTitleBarHeight, FallbackValue=44}"
                    CornerRadius="{DynamicResource CornerRadius}"
                    ResizeBorderThickness="{DynamicResource ResizeBorderThickness}" />
            </Setter.Value>
        </Setter>

        <!--  Window Properties  -->
        <Setter Property="Background" Value="{DynamicResource BackgroundColorBrush}" />
        <Setter Property="AllowsTransparency" Value="True" />
        <Setter Property="WindowStyle" Value="None" />
    </Style>

    <Style
        x:Key="ReloadedWindow"
        BasedOn="{StaticResource ReloadedReactiveWindow}"
        TargetType="{x:Type re:ReloadedWindow}">
        <Setter Property="Foreground" Value="{DynamicResource TextColorBrush}" />
    </Style>

    <Style x:Key="HeaderAlignment" TargetType="{x:Type Viewbox}">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

</ResourceDictionary>
