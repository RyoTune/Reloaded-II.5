<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:hc="https://handyorg.github.io/handycontrol"
    xmlns:sys="clr-namespace:System;assembly=System.Runtime">

    <sys:Double x:Key="TextSizeSmall">14</sys:Double>
    <sys:Double x:Key="TextSizeMedium">16</sys:Double>
    <sys:Double x:Key="TextSizeLarge">20</sys:Double>

    <sys:Double x:Key="ControlTextSize">14</sys:Double>

    <sys:Double x:Key="GlassBackgroundOpacity">0.65</sys:Double>
    <sys:Double x:Key="ControlOnBackgroundOpacity">0.55</sys:Double>
    <sys:Double x:Key="ControlBorderOpacity">0.75</sys:Double>

    <CornerRadius x:Key="ControlRadiusSmall">2</CornerRadius>
    <CornerRadius x:Key="ControlRadiusMedium">4</CornerRadius>
    <CornerRadius x:Key="ControlRadiusLarge">12</CornerRadius>

    <CornerRadius x:Key="CornerRadius">4</CornerRadius>

    <Color x:Key="TextColor">#f2f2f2</Color>
    <Color x:Key="GlassBackgroundColor">#0a0a0a</Color>
    <Color x:Key="ControlFillColor">#1a1a1a</Color>
    <Color x:Key="ControlHighlightColor">#333333</Color>
    <Color x:Key="ControlBorderColor">#808080</Color>

    <SolidColorBrush x:Key="GlassBackgroundSolidBrush" Color="{DynamicResource GlassBackgroundColor}" />
    <SolidColorBrush x:Key="ControlFillBrush" Color="{DynamicResource ControlFillColor}" />
    <SolidColorBrush x:Key="ControlHighlightBrush" Color="{DynamicResource ControlHighlightColor}" />
    <SolidColorBrush x:Key="RemixTextBrush" Color="{DynamicResource TextColor}" />

    <SolidColorBrush
        x:Key="GlassBackgroundBrush"
        Opacity="{DynamicResource GlassBackgroundOpacity}"
        Color="{DynamicResource GlassBackgroundColor}" />

    <SolidColorBrush
        x:Key="ControlOnBackgroundBrush"
        Opacity="{DynamicResource ControlOnBackgroundOpacity}"
        Color="{DynamicResource ControlFillColor}" />

    <!--  Control Border (also apply to Reloaded's  -->
    <SolidColorBrush
        x:Key="ControlBorderBrush"
        Opacity="{DynamicResource ControlBorderOpacity}"
        Color="{DynamicResource ControlBorderColor}" />

    <!--  Animations  -->
    <Storyboard x:Key="ControlHighlightToFill" Storyboard.TargetProperty="Background.Color">
        <ColorAnimation
            From="{StaticResource ControlHighlightColor}"
            To="{StaticResource ControlFillColor}"
            Duration="{StaticResource ColorTransitionDuration}" />
    </Storyboard>

    <Storyboard x:Key="ControlFillToHighlight" Storyboard.TargetProperty="Background.Color">
        <ColorAnimation
            From="{StaticResource ControlFillColor}"
            To="{StaticResource ControlHighlightColor}"
            Duration="{StaticResource ColorTransitionDuration}" />
    </Storyboard>

    <!--  Default brushes.  -->
    <SolidColorBrush x:Key="AccentColorBrush" Color="{DynamicResource ThemeColor}" />
    <SolidColorBrush x:Key="TextColorBrush" Color="{DynamicResource TextColor}" />
    <SolidColorBrush
        x:Key="BorderColorBrush"
        Opacity="{DynamicResource ControlBorderOpacity}"
        Color="{DynamicResource ControlBorderColor}" />
    <SolidColorBrush x:Key="BackgroundColorBrush" Color="{DynamicResource ControlFillColor}" />

    <SolidColorBrush x:Key="AccentColorLightestBrush" Color="Pink" />
    <SolidColorBrush x:Key="AccentColorLighterBrush" Color="Green" />
    <SolidColorBrush x:Key="AccentColorLightBrush" Color="Yellow" />
    <SolidColorBrush x:Key="AccentColorBrushDark" Color="Orange" />
    <SolidColorBrush x:Key="AccentColorBrushDarker" Color="Ivory" />
    <SolidColorBrush x:Key="AccentColorBrushDarkest" Color="Teal" />

    <SolidColorBrush x:Key="BorderColorLightBrush" Color="{DynamicResource BorderColorLight}" />
    <SolidColorBrush x:Key="BorderColorDarkBrush" Color="{DynamicResource BorderColorDark}" />
    <SolidColorBrush
        x:Key="TooltipBackgroundColorBrush"
        Opacity="{DynamicResource TooltipBackgroundOpacity}"
        Color="{DynamicResource TooltipBackgroundColor}" />

    <!--  Button  -->
    <Style x:Key="DefaultButton" TargetType="Button">
        <Setter Property="FontFamily" Value="{DynamicResource FontLight}" />
        <Setter Property="Background" Value="{DynamicResource ControlOnBackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource RemixTextBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ControlBorderBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource ControlTextSize}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="8,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        MinWidth="32"
                        MinHeight="32"
                        Padding="{TemplateBinding Padding}"
                        HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalAlignment}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{DynamicResource ControlRadiusSmall}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ControlHighlightBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource ThemeBrushLighter}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource ThemeBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="UnpaddedStretchedGridButton"
        BasedOn="{StaticResource DefaultButton}"
        TargetType="{x:Type Button}" />

    <Style
        x:Key="UnpaddedStretchedButton"
        BasedOn="{StaticResource DefaultButton}"
        TargetType="{x:Type Button}" />

    <Style
        x:Key="GridButton"
        BasedOn="{StaticResource DefaultButton}"
        TargetType="{x:Type Button}" />

    <Style BasedOn="{StaticResource DefaultButton}" TargetType="{x:Type Button}" />

    <!--  CheckBox  -->
    <Style
        x:Key="DefaultCheckBox"
        BasedOn="{StaticResource DefaultCheckBoxBase}"
        TargetType="{x:Type CheckBox}">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Style.Triggers>
            <!--  Colour the checkbox.  -->
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource ThemeBrushLighter}" />
                <Setter Property="Background" Value="{DynamicResource ThemeBrush}" />
            </Trigger>

            <!--  Colour text content on IsMouseOver.  -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource ThemeBrushLighter}" />
                <Setter Property="Background" Value="{DynamicResource ThemeBrushLighter}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style BasedOn="{StaticResource DefaultCheckBox}" TargetType="{x:Type CheckBox}" />

    <!--  ListView  -->
    <Style x:Key="DefaultListViewItemStyle" TargetType="{x:Type ListViewItem}">
        <Setter Property="Padding" Value="4" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource ReloadedFocusVisual}" />
        <Setter Property="BorderBrush" Value="Transparent" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Grid>
                        <Border
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="1"
                            CornerRadius="{DynamicResource ControlRadiusSmall}">
                            <ContentPresenter
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource ControlHighlightBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource ControlBorderBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="DefaultListViewStyle"
        BasedOn="{StaticResource BaseStyle}"
        TargetType="{x:Type ListView}">
        <Setter Property="Background" Value="{DynamicResource GlassBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ControlBorderBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="BorderThickness" Value="{DynamicResource ListViewBorderThickness}" />
        <Setter Property="BorderBrush" Value="{StaticResource BorderColorBrush}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border
                        x:Name="ListView_BorderMask"
                        Padding="2"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="1"
                        CornerRadius="{DynamicResource ControlRadiusMedium}">

                        <!--  Internal contents  -->
                        <ScrollViewer Focusable="false">
                            <ItemsPresenter
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true" />
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style BasedOn="{StaticResource DefaultListViewItemStyle}" TargetType="{x:Type ListViewItem}" />
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource DefaultListViewStyle}" TargetType="{x:Type ListView}" />

    <!--  *********************************************************  -->
    <!--  TextBox  -->
    <Style
        x:Key="TextBoxBaseStyle"
        BasedOn="{StaticResource TextBoxBaseStyle}"
        TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{DynamicResource GlassBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ControlBorderBrush}" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{DynamicResource ControlRadiusSmall}" />
        <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <hc:SimplePanel x:Name="root">
                        <Border
                            x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                            SnapsToDevicePixels="True" />
                        <ScrollViewer
                            x:Name="PART_ContentHost"
                            Margin="-2,0"
                            Padding="{TemplateBinding Padding}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="false"
                            HorizontalScrollBarVisibility="Hidden"
                            VerticalScrollBarVisibility="Hidden" />
                    </hc:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.4" />
                        </Trigger>
                        <Trigger SourceName="PART_ContentHost" Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource ThemeBrushLighter}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource ThemeBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="DefaultTextBox"
        BasedOn="{StaticResource TextBoxBaseStyle}"
        TargetType="{x:Type TextBox}" />

    <Style
        x:Key="DefaultTextBoxBase"
        BasedOn="{StaticResource TextBoxBaseStyle}"
        TargetType="{x:Type TextBox}" />

    <Style BasedOn="{StaticResource TextBoxBaseStyle}" TargetType="{x:Type TextBox}" />

    <!--  TabControl  -->
    <Style TargetType="TabControl">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource ControlBorderBrush}" />
    </Style>

    <Style BasedOn="{StaticResource TabItemStyle}" TargetType="TabItem">
        <Setter Property="MinWidth" Value="128" />
        <Setter Property="FontSize" Value="{DynamicResource ControlTextSize}" />
        <Setter Property="Background" Value="Transparent" />
    </Style>

    <!--  Separator  -->
    <Style TargetType="Separator">
        <Setter Property="Foreground" Value="{DynamicResource ControlBorderBrush}" />
    </Style>

    <!--  ComboBox  -->
    <SolidColorBrush x:Key="RegionBrush" Color="Transparent" />
    <SolidColorBrush x:Key="SecondaryRegionBrush" Color="Transparent" />

    <Style x:Key="DefaultComboBox" TargetType="ComboBox" />

    <Style x:Key="DefaultComboBoxItem" TargetType="ComboBoxItem" />

    <Style BasedOn="{StaticResource DefaultComboBoxItem}" TargetType="ComboBoxItem" />
    <Style BasedOn="{StaticResource DefaultComboBox}" TargetType="ComboBox" />
</ResourceDictionary>