using Reloaded.Mod.Launcher.Lib.Remix.Mods;

namespace Reloaded.Mod.Launcher.Lib.Models.Model.Application;

/// <summary>
/// Specialized version of <see cref="BooleanGenericTuple{TGeneric}"/> intended for storing bindable mod information.
/// </summary>
public class ModEntry : ObservableObject, IEquatable<ModEntry>
{// ReSharper disable once UnusedMember.Global

    /// <summary/>
    public const string NameOfEnabled = nameof(Enabled);

    /// <summary>
    /// Whether the current mod is enabled.
    /// </summary>
    public bool? Enabled            { get; set; }

    /// <summary>
    /// Whether the state of the checkbox can be edited or not.
    /// </summary>
    public bool IsEditable          { get; set; }
    
    /// <summary>
    /// The mod to toggle the state for.
    /// </summary>
    public PathTuple<ModConfig> Tuple  { get; set; }

    /// <summary>
    /// Mod status in regards to update, configurability, etc.
    /// </summary>
    public ModStatus Status { get; set; }

    /// <summary>
    /// Command to open mod config.
    /// </summary>
    public ConfigureModCommand ConfigureModCommand { get; set; }

    /// <summary>
    /// Whether this mod entry appears in the mods list.
    /// </summary>
    public bool IsHidden { get; set; } = false;

    /// <inheritdoc />
    public ModEntry(bool? enabled, bool isHidden, PathTuple<ModConfig> tuple, ConfigureModCommand configCommand)
    {
        IsEditable = !tuple.Config.IsLibrary;
        IsHidden = isHidden;
        Enabled = !IsEditable ? null : enabled;
        Tuple = tuple;
        ConfigureModCommand = configCommand;
        Status = ModStatusRegistry.GetModStatus(tuple);
    }

    // Autogenerated by R# 

    #region Autogenerated
    /// <inheritdoc/>
    public bool Equals(ModEntry? other)
    {
        if (ReferenceEquals(null, other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return Enabled == other.Enabled && IsEditable == other.IsEditable && Tuple.Equals(other.Tuple);
    }

    /// <inheritdoc/>
    public override bool Equals(object? obj)
    {
        if (ReferenceEquals(null, obj)) return false;
        if (ReferenceEquals(this, obj)) return true;
        if (obj.GetType() != GetType()) return false;
        return Equals((ModEntry)obj);
    }

    /// <inheritdoc/>
    public override int GetHashCode()
    {
        return Tuple.GetHashCode();
    }
    #endregion
}